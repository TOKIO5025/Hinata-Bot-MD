import moment from 'moment-timezone';

let scheduledKicks = [];

var handler = async (m, { conn, text, args }) => {
  let regexHora = /(\d{1,2}):(\d{2})\s*(de la)?\s*(ma√±ana|tarde|noche)/i;
  let match = text.match(regexHora);
  let user = m.mentionedJid?.[0] || (m.quoted ? m.quoted.sender : null);

  if (!match || !user) {
    return conn.reply(m.chat, 'üìå Usa el comando as√≠:\n.kick 11:00 de la noche @usuario', m);
  }

  let [_, horaStr, minutoStr, _, periodo] = match;
  let hora = parseInt(horaStr);
  let minuto = parseInt(minutoStr);

  // Convertir a formato 24h
  if (periodo.toLowerCase() === 'tarde' && hora < 12) hora += 12;
  if (periodo.toLowerCase() === 'noche' && hora < 12) hora += 12;
  if (periodo.toLowerCase() === 'ma√±ana' && hora === 12) hora = 0;

  // Obtener hora actual y futura
  let ahora = moment().tz('America/Guatemala');
  let kickHora = ahora.clone().hour(hora).minute(minuto).second(0);

  if (kickHora.isBefore(ahora)) {
    kickHora.add(1, 'day'); // Si ya pas√≥, programa para ma√±ana
  }

  let delay = kickHora.diff(ahora);

  await conn.reply(m.chat, `‚è≥ *${conn.getName(user)} ser√° eliminado a las ${kickHora.format("hh:mm A")}.*`, m);
  await conn.sendMessage(m.chat, { react: { text: '‚è∞', key: m.key } });

  // Guardar tarea programada
  scheduledKicks.push(setTimeout(async () => {
    try {
      await conn.sendMessage(m.chat, {
        audio: { url: 'https://qu.ax/ygCsB.mp4' },
        mimetype: 'audio/mp4',
        ptt: true
      });
      await new Promise(r => setTimeout(r, 1000));
      await conn.groupParticipantsUpdate(m.chat, [user], 'remove');
    } catch (e) {
      await conn.reply(m.chat, '‚ö†Ô∏è No se pudo ejecutar el kick programado.', m);
    }
  }, delay));
};

handler.help = ['kic <hora> @usuario'];
handler.tags = ['grupo'];
handler.command = ['kicktime', 'kickporhora', 'kickxhora', 'kickprogramado'];
handler.admin = true;
handler.group = true;
handler.register = true;
handler.botAdmin = true;

export default handler;
